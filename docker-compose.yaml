services:
  catalogservice:
    build:
      context: .
      dockerfile: catalogService/Dockerfile
    environment:
      - PORT=:8080
      - DB_HOST=${DB_ADDRESS}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SCHEMA=catalog
    restart: unless-stopped
    ports:
      - 8080:8080

  backgroundworkerservice:
    build:
      context: .
      dockerfile: backgroundWorkerService/Dockerfile
    environment:
      - PORT=:8080
      - DB_HOST=${DB_ADDRESS}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SCHEMA=background
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_TTL=${REDIS_TTL}
      - FIXER_TOKEN=${FIXER_TOKEN}
      - KAFKA_HOST=kafka
      - KAFKA_PORT=:9092
      - ORDER_SERVICE_ADDR=http://orderservice:8080
    restart: unless-stopped
    ports:
      - 8082:8080

  orderservice:
    build:
      context: .
      dockerfile: orderService/Dockerfile
    environment:
      - PORT=:8080
      - DB_HOST=${DB_ADDRESS}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SCHEMA=orders
      - CATALOG_SERVICE_ADDR=http://catalogservice:8080
      - BACKGROUND_SERVICE_ADDR=http://backgroundworkerservice:8080
      - KAFKA_HOST=kafka
      - KAFKA_PORT=:9092
    restart: unless-stopped
    ports:
      - 8081:8080

  reviewsservice:
    build:
      context: .
      dockerfile: reviewsService/Dockerfile
    environment:
      - PORT=:8080
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_NAME=reviews
      - MONGO_COLLECTION=reviews
      - CATALOG_SERVICE_ADDR=http://catalogservice:8080
      - AUTH_SERVICE_ADDR=http://authervice:8080
      - KAFKA_HOST=kafka
      - KAFKA_PORT=:9092
    restart: unless-stopped
    ports:
      - 8083:8080

  authervice:
    build:
      context: .
      dockerfile: authService/Dockerfile
    environment:
      - PORT=:8080
      - DB_HOST=${DB_ADDRESS}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SCHEMA=auth
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=1
      - JWT_SECRET=superSecretText
      - ACCESS_TOKEN_TTL=180
      - REFRESH_TOKEN_TTL=720
    restart: unless-stopped
    ports:
      - 8084:8080

  postgresql:
    image: docker.io/bitnami/postgresql:17
    ports:
      - '5432:5432'
    volumes:
      - 'postgresql_data:/bitnami/postgresql'
    environment:
      - 'ALLOW_EMPTY_PASSWORD=yes'
  redis:
    image: 'bitnami/redis:latest'
    ports:
      - '6379:6379'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
  mongodb:
    image: 'bitnami/mongodb:latest'
    platform: linux/amd64
    ports:
      - '27017:27017'
    volumes:
      - 'mongo_data:/bitnami/mongodb'
    environment:
      - 'ALLOW_EMPTY_PASSWORD=yes'
  kafka:
    image: docker.io/bitnami/kafka:latest
    ports:
      - '9092:9092'
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8877:8080
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      DYNAMIC_CONFIG_ENABLED: 'true'

volumes:
  postgresql_data:
    driver: local
  mongo_data:
    driver: local
  kafka_data:
    driver: local